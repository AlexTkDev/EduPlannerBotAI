from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from services.llm import generate_study_plan
from services.pdf import save_plan_to_pdf
from services.txt import save_plan_to_txt
from services.db import save_user_plan

router = Router()


class PlanFormat(StatesGroup):
    """State machine for selecting the format of the study plan."""
    waiting_for_format = State()
    waiting_for_topic = State()
    waiting_for_next_action = State()

    def __str__(self):
        return "PlanFormat FSM"


@router.message(Command("plan"))
async def cmd_plan(message: types.Message, state: FSMContext):
    await state.set_state(PlanFormat.waiting_for_format)
    await message.answer(
        "–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω?\n–í—ã–±–µ—Ä–∏: ",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üìÑ pdf", callback_data="format_pdf")],
                [types.InlineKeyboardButton(text="üìÑ txt", callback_data="format_txt")]
            ]
        )
    )


@router.callback_query(F.data.startswith("format_"))
async def process_format(callback: types.CallbackQuery, state: FSMContext):
    selected_format = callback.data.split("_")[1]
    await state.update_data(selected_format=selected_format)
    await state.set_state(PlanFormat.waiting_for_topic)
    await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–º—É –¥–ª—è —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ üìö")
    await callback.answer()


@router.message(PlanFormat.waiting_for_topic)
async def handle_topic(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    selected_format = user_data.get("selected_format")
    topic = message.text.strip()

    plan = await generate_study_plan(topic)
    save_user_plan(message.from_user.id, plan)

    if selected_format == "pdf":
        pdf_path = save_plan_to_pdf(plan, message.from_user.id)
        await message.answer_document(document=types.FSInputFile(pdf_path),
                                      caption="üìò –¢–≤–æ–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –≤ PDF")
    else:
        # Using the txt module instead of inline text conversion
        txt_path = save_plan_to_txt(plan, message.from_user.id)
        await message.answer_document(
            document=types.FSInputFile(txt_path),
            caption="üìÑ –¢–≤–æ–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –≤ TXT")

    await state.set_state(PlanFormat.waiting_for_next_action)
    await message.answer(
        "–ß—Ç–æ –µ—â—ë —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω",
                                            callback_data="new_plan")],
                [types.InlineKeyboardButton(text="üëã –ù–∏—á–µ–≥–æ, —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
                                            callback_data="goodbye")]
            ]
        )
    )


@router.callback_query(PlanFormat.waiting_for_next_action, F.data == "new_plan")
async def handle_new_plan(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω!")
    await cmd_plan(callback.message, state)


@router.callback_query(PlanFormat.waiting_for_next_action, F.data == "goodbye")
async def handle_goodbye(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üëã –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å —Å–Ω–æ–≤–∞, –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è.")
    await state.clear()
