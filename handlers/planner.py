from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from services.llm import generate_study_plan
from services.pdf import save_plan_to_pdf
from services.txt import save_plan_to_txt
from services.db import save_user_plan, get_user_plan

router = Router()


class PlanFormat(StatesGroup):
    """State machine for selecting the format of the study plan."""
    waiting_for_topic = State()
    waiting_for_format = State()
    waiting_for_next_action = State()

    def __str__(self):
        return "PlanFormat FSM"


@router.message(Command("plan"))
async def cmd_plan(message: types.Message, state: FSMContext):
    await state.set_state(PlanFormat.waiting_for_topic)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–º—É –¥–ª—è —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ üìö")


@router.message(PlanFormat.waiting_for_topic)
async def handle_topic(message: types.Message, state: FSMContext):
    topic = message.text.strip()

    # Send "typing" action to show the bot is working
    await message.bot.send_chat_action(message.chat.id, "typing")

    # Generate plan
    plan = await generate_study_plan(topic)
    save_user_plan(message.from_user.id, plan)
    await state.update_data(plan=plan)

    # Send plan to chat
    plan_text = "\n".join(plan)
    if len(plan_text) > 4000:
        plan_text = plan_text[:4000] + "...\n(–ø–ª–∞–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –±—É–¥–µ—Ç –≤ —Ñ–∞–π–ª–µ)"

    await message.answer(f"üìö –¢–≤–æ–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω:\n\n{plan_text}")

    # Ask for format
    await state.set_state(PlanFormat.waiting_for_format)
    await message.answer(
        "–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω?",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üìÑ pdf", callback_data="format_pdf"),
                 types.InlineKeyboardButton(text="üìÑ txt", callback_data="format_txt")],
                [types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="format_skip")]
            ]
        )
    )


@router.callback_query(PlanFormat.waiting_for_format, F.data.startswith("format_"))
async def process_format(callback: types.CallbackQuery, state: FSMContext):
    selected_format = callback.data.split("_")[1]
    await callback.answer()

    if selected_format == "skip":
        await show_next_actions(callback.message, state)
        return

    user_data = await state.get_data()
    plan = user_data.get("plan", [])

    if not plan:
        await callback.message.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
        return

    if selected_format == "pdf":
        pdf_path = save_plan_to_pdf(plan, callback.from_user.id)
        await callback.message.answer_document(
            document=types.FSInputFile(pdf_path),
            caption="üìò –¢–≤–æ–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –≤ PDF"
        )
    else:
        txt_path = save_plan_to_txt(plan, callback.from_user.id)
        await callback.message.answer_document(
            document=types.FSInputFile(txt_path),
            caption="üìÑ –¢–≤–æ–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –≤ TXT"
        )

    await show_next_actions(callback.message, state)


async def show_next_actions(message: types.Message, state: FSMContext):
    await state.set_state(PlanFormat.waiting_for_next_action)
    await message.answer(
        "–ß—Ç–æ –µ—â—ë —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                                            callback_data="schedule_reminders")],
                [types.InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω",
                                            callback_data="new_plan")],
                [types.InlineKeyboardButton(text="üëã –ù–∏—á–µ–≥–æ, —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
                                            callback_data="goodbye")]
            ]
        )
    )


@router.callback_query(PlanFormat.waiting_for_next_action, F.data == "schedule_reminders")
async def handle_reminders(callback: types.CallbackQuery, state: FSMContext):
    from services.reminders import schedule_reminders  # pylint: disable=import-outside-toplevel

    await callback.answer()
    user_id = callback.from_user.id

    # Get plan from state
    user_data = await state.get_data()
    plan = user_data.get("plan", [])

    if not plan:
        await callback.message.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
        return

    # Start reminder scheduling
    message = await callback.message.answer("‚è≥ –ü–ª–∞–Ω–∏—Ä—É—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")

    # Run async reminder scheduling task
    reminders_count = await schedule_reminders(user_id, plan)

    # Update message after scheduling completion
    await message.edit_text(
        f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {reminders_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ç–≤–æ–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"
    )


@router.callback_query(PlanFormat.waiting_for_next_action, F.data == "new_plan")
async def handle_new_plan(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω!")
    await cmd_plan(callback.message, state)


@router.callback_query(PlanFormat.waiting_for_next_action, F.data == "goodbye")
async def handle_goodbye(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üëã –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å —Å–Ω–æ–≤–∞, –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è.")
    await state.clear()


@router.message(Command("myplans"))
async def cmd_my_plans(message: types.Message):
    user_id = message.from_user.id
    plan = get_user_plan(user_id)

    if not plan:
        await message.answer(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π /plan —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
        return

    plan_text = "\n".join(plan)
    if len(plan_text) > 4000:
        txt_path = save_plan_to_txt(plan, user_id)
        await message.answer_document(document=types.FSInputFile(txt_path),
                                      caption="üìö –¢–≤–æ–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω")
    else:
        await message.answer(f"üìö –¢–≤–æ–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω:\n\n{plan_text}")
