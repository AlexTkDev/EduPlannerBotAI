import asyncio
import logging

logger = logging.getLogger(__name__)


async def schedule_reminders(user_id: int, plan: list):
    """Schedule reminders for study plan steps"""
    logger.info("Scheduling reminders for user %s", user_id)

    for i, task in enumerate(plan, start=1):
        if task.strip():  # Skip empty lines in plan
            await asyncio.sleep(0.1)  # Simulate delay for scheduling
            logger.info(f"Reminder for {user_id}: day {i} ‚Äî {task}")

    return len([task for task in plan if task.strip()])  # Return number of reminders

    # Add handler for reminders in handlers/planner.py
    # Update handle_topic and add new callback_handler

    # In handle_topic method add:
    # Save plan in state for later use
    await state.update_data(plan=plan)


# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π callback handler –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:
@router.callback_query(PlanFormat.waiting_for_next_action, F.data == "schedule_reminders")
async def handle_reminders(callback: types.CallbackQuery, state: FSMContext):
    from services.reminders import schedule_reminders

    await callback.answer()
    user_id = callback.from_user.id

    # Get plan from state
    user_data = await state.get_data()
    plan = user_data.get("plan", [])

    if not plan:
        await callback.message.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
        return

    # Start reminder scheduling
    message = await callback.message.answer("‚è≥ –ü–ª–∞–Ω–∏—Ä—É—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")

    # Run async reminder scheduling task
    reminders_count = await schedule_reminders(user_id, plan)

    # Update message after scheduling completion
    await message.edit_text(
        f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {reminders_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ç–≤–æ–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"
    )

    # Update keyboard in handle_topic, adding button for reminders:
    await message.answer(
        "–ß—Ç–æ –µ—â—ë —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üìä –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω",
                                            callback_data="visualize_plan")],
                [types.InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                                            callback_data="schedule_reminders")],
                [types.InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω",
                                            callback_data="new_plan")],
                [types.InlineKeyboardButton(text="üëã –ù–∏—á–µ–≥–æ, —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
                                            callback_data="goodbye")]
            ]
        )
    )
